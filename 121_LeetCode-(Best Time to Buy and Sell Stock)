#Approach-1 -------------------------(O(n2))

class Solution {
    public int maxProfit(int[] prices) {
        int maxProfit=0;

        for(int buy=0;buy<prices.length-1;buy++){
            for(int sell=buy+1;sell<prices.length;sell++){
                int diff = prices[sell]-prices[buy];
                if(diff>maxProfit)
                    maxProfit=diff;
            }
        }return maxProfit;
        
    }
}

#Approach-2

class Solution {
    public int maxProfit(int[] prices) {
        int min = Integer.MAX_VALUE;
        int profit =0;
        for(int i=0; i<prices.length; i++){
              if(prices[i]<min) min = prices[i];
            
            if(prices[i]-min>profit)
                profit = prices[i]-min;
        }
        return profit;
    }
}

// Approach - 3 

import java.util.*;

public class Main {

  public static void main(String[] args) {
    int arr[] = {7,1,5,3,6,4};

    int maxPro = maxProfit(arr);
    System.out.println("Max profit is: " + maxPro);

  }
  static int maxProfit(int[] arr) {
    int maxPro = 0;
    int minPrice = Integer.MAX_VALUE;
    for (int i = 0; i < arr.length; i++) {
      minPrice = Math.min(minPrice, arr[i]);
      maxPro = Math.max(maxPro, arr[i] - minPrice);
    }
    return maxPro;
  }
}
